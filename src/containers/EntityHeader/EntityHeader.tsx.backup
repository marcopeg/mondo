import type { RefObject } from "react";
import { useMemo } from "react";
import { useEntityFile } from "@/context/EntityFileProvider";
import { useApp } from "@/hooks/use-app";
import { MONDO_ENTITIES, type MondoEntityType } from "@/entities";
import { isMondoEntityType } from "@/types/MondoFileType";
import type { TCachedFile } from "@/types/TCachedFile";
import { KnownEntityHeader } from "./KnownEntityHeader";
import { UnknownEntityHeader } from "./UnknownEntityHeader";
import { resolveCoverImage } from "@/utils/resolveCoverImage";
import { getEntityDisplayName } from "@/utils/getEntityDisplayName";

const buildHeaderLabel = (entityType: MondoEntityType | null) => {
  if (!entityType) {
    return "Unknown note";
  }
  const config = MONDO_ENTITIES[entityType];
  return config?.name ?? entityType;
};

type EntityHeaderProps = {
  containerRef: RefObject<HTMLDivElement | null>;
  type: string | null;
};

export const EntityHeader = ({ containerRef, type }: EntityHeaderProps) => {
  const { file } = useEntityFile();
  const app = useApp();

  const entityType = useMemo(() => {
    if (!type) return null;
    return isMondoEntityType(type) ? (type as MondoEntityType) : null;
  }, [type]);

  const label = useMemo(() => buildHeaderLabel(entityType), [entityType]);

  const displayName = useMemo(() => {
    const cached = file as TCachedFile | undefined;
    return cached ? getEntityDisplayName(cached) : "Untitled";
  }, [file]);

  const coverSrc = useMemo(() => {
    const cached = file as TCachedFile | undefined;
    if (!cached) return null;
    const cover = resolveCoverImage(app, cached);
    if (!cover) return null;
    return cover.kind === "vault"
      ? app.vault.getResourcePath(cover.file)
      : cover.url;
  }, [app, file]);

  const headerClasses = [
    "flex items-center justify-between gap-3",
    "rounded-md border border-[var(--background-modifier-border)]",
    "bg-[var(--background-secondary)] px-3 py-2",
  ].join(" ");

  const fileRef = file as TCachedFile | undefined;

  return (
    <div className={headerClasses}>
      {/* Block 1: Cover */}
      {coverSrc ? (
        <img
          src={coverSrc}
          alt="Cover thumbnail"
          className="h-10 w-10 flex-shrink-0 rounded-md object-cover"
        />
      ) : (
        <div className="h-10 w-10 flex-shrink-0 rounded-md bg-[var(--background-modifier-border)]" />
      )}

      {/* Block 2: Name (1st line) and Chip (2nd line) */}
      <div className="min-w-0 flex-1">
        <div className="truncate text-sm font-semibold text-[var(--text-normal)]">
          {displayName}
        </div>
        <div className="text-xs font-semibold uppercase tracking-wide text-[var(--text-muted)]">
          Mondo Note â€¢ {label}
        </div>
      </div>

      {/* Block 3: Actions (right) */}
      {entityType ? (
        <KnownEntityHeader containerRef={containerRef} entityType={entityType} />
      ) : (
        <UnknownEntityHeader app={app} file={fileRef} />
      )}
    </div>
  );
};

export default EntityHeader;
